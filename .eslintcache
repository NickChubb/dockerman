[{"/home/nick/dev/dockerman/src/index.js":"1","/home/nick/dev/dockerman/src/App.js":"2","/home/nick/dev/dockerman/src/reportWebVitals.js":"3","/home/nick/dev/dockerman/src/components/Header.js":"4","/home/nick/dev/dockerman/src/components/Button.js":"5","/home/nick/dev/dockerman/src/components/Footer.js":"6","/home/nick/dev/dockerman/src/components/api/container.js":"7","/home/nick/dev/dockerman/src/Routes.js":"8","/home/nick/dev/dockerman/src/page/ContainerPage.js":"9","/home/nick/dev/dockerman/src/page/MainPage.js":"10","/home/nick/dev/dockerman/src/page/LoginPage.js":"11","/home/nick/dev/dockerman/src/components/api/login.js":"12","/home/nick/dev/dockerman/src/components/useToken.js":"13","/home/nick/dev/dockerman/src/components/InfoField.js":"14","/home/nick/dev/dockerman/src/components/api/image.js":"15","/home/nick/dev/dockerman/src/components/SystemInfo.js":"16","/home/nick/dev/dockerman/src/components/api/system.js":"17","/home/nick/dev/dockerman/src/components/api/helpers.js":"18","/home/nick/dev/dockerman/src/components/api/db.js":"19","/home/nick/dev/dockerman/src/components/screens/Display.js":"20","/home/nick/dev/dockerman/src/components/screens/repos/DisplayRepo.js":"21","/home/nick/dev/dockerman/src/components/screens/repos/DisplayNew.js":"22","/home/nick/dev/dockerman/src/components/screens/containers/DisplayContainers.js":"23","/home/nick/dev/dockerman/src/components/screens/images/DisplayImages.js":"24","/home/nick/dev/dockerman/src/components/screens/config/DisplayConfig.js":"25","/home/nick/dev/dockerman/src/components/screens/repos/Repos.js":"26","/home/nick/dev/dockerman/src/components/screens/containers/Containers.js":"27","/home/nick/dev/dockerman/src/components/screens/images/Images.js":"28","/home/nick/dev/dockerman/src/components/screens/config/ConfigGroup.js":"29","/home/nick/dev/dockerman/src/components/screens/images/Image.js":"30","/home/nick/dev/dockerman/src/components/screens/repos/Repo.js":"31","/home/nick/dev/dockerman/src/components/screens/containers/Container.js":"32","/home/nick/dev/dockerman/src/components/screens/config/ConfigParameter.js":"33","/home/nick/dev/dockerman/src/components/screens/config/TextParameter.js":"34","/home/nick/dev/dockerman/src/components/screens/config/BoolParameter.js":"35","/home/nick/dev/dockerman/src/components/screens/containers/Status.js":"36","/home/nick/dev/dockerman/src/components/screens/containers/Serve.js":"37","/home/nick/dev/dockerman/src/components/screens/log/DisplayLog.js":"38","/home/nick/dev/dockerman/src/components/screens/log/Log.js":"39","/home/nick/dev/dockerman/src/components/screens/Tabs.js":"40","/home/nick/dev/dockerman/src/components/screens/log/LogEntry.js":"41","/home/nick/dev/dockerman/src/components/ToggleLink.js":"42","/home/nick/dev/dockerman/src/components/screens/git/DisplayGit.js":"43"},{"size":658,"mtime":1612117584047,"results":"44","hashOfConfig":"45"},{"size":368,"mtime":1613463624079,"results":"46","hashOfConfig":"45"},{"size":362,"mtime":1610780794789,"results":"47","hashOfConfig":"45"},{"size":375,"mtime":1614378288166,"results":"48","hashOfConfig":"45"},{"size":222,"mtime":1612226446861,"results":"49","hashOfConfig":"45"},{"size":319,"mtime":1627000747356,"results":"50","hashOfConfig":"45"},{"size":2506,"mtime":1626741840975,"results":"51","hashOfConfig":"45"},{"size":769,"mtime":1625683211130,"results":"52","hashOfConfig":"45"},{"size":579,"mtime":1621817571036,"results":"53","hashOfConfig":"45"},{"size":203,"mtime":1622618506914,"results":"54","hashOfConfig":"45"},{"size":1371,"mtime":1624918858136,"results":"55","hashOfConfig":"45"},{"size":512,"mtime":1624918837088,"results":"56","hashOfConfig":"45"},{"size":528,"mtime":1612120829943,"results":"57","hashOfConfig":"45"},{"size":215,"mtime":1612231160814,"results":"58","hashOfConfig":"45"},{"size":459,"mtime":1616438598884,"results":"59","hashOfConfig":"45"},{"size":1181,"mtime":1627442839997,"results":"60","hashOfConfig":"45"},{"size":1385,"mtime":1627442527040,"results":"61","hashOfConfig":"45"},{"size":373,"mtime":1614377722219,"results":"62","hashOfConfig":"45"},{"size":944,"mtime":1626367646489,"results":"63","hashOfConfig":"45"},{"size":1203,"mtime":1627502206503,"results":"64","hashOfConfig":"45"},{"size":708,"mtime":1627502064486,"results":"65","hashOfConfig":"45"},{"size":2730,"mtime":1622618311873,"results":"66","hashOfConfig":"45"},{"size":1145,"mtime":1626742034204,"results":"67","hashOfConfig":"45"},{"size":768,"mtime":1624660883797,"results":"68","hashOfConfig":"45"},{"size":3378,"mtime":1624914739749,"results":"69","hashOfConfig":"45"},{"size":500,"mtime":1624659976638,"results":"70","hashOfConfig":"45"},{"size":269,"mtime":1622618172814,"results":"71","hashOfConfig":"45"},{"size":240,"mtime":1622618214918,"results":"72","hashOfConfig":"45"},{"size":423,"mtime":1622783985622,"results":"73","hashOfConfig":"45"},{"size":193,"mtime":1622618213774,"results":"74","hashOfConfig":"45"},{"size":254,"mtime":1622618303485,"results":"75","hashOfConfig":"45"},{"size":691,"mtime":1627001360473,"results":"76","hashOfConfig":"45"},{"size":942,"mtime":1625184260696,"results":"77","hashOfConfig":"45"},{"size":560,"mtime":1622783677393,"results":"78","hashOfConfig":"45"},{"size":1143,"mtime":1622915045845,"results":"79","hashOfConfig":"45"},{"size":4078,"mtime":1626741698623,"results":"80","hashOfConfig":"45"},{"size":3221,"mtime":1627072652795,"results":"81","hashOfConfig":"45"},{"size":714,"mtime":1626367702437,"results":"82","hashOfConfig":"45"},{"size":364,"mtime":1627000077722,"results":"83","hashOfConfig":"45"},{"size":465,"mtime":1627500281154,"results":"84","hashOfConfig":"45"},{"size":301,"mtime":1626817450350,"results":"85","hashOfConfig":"45"},{"size":525,"mtime":1624664182923,"results":"86","hashOfConfig":"45"},{"size":640,"mtime":1627502156847,"results":"87","hashOfConfig":"45"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"91"},"12zq7o2",{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"91"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"91"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"91"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"91"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"91"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"91"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"91"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"91"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"91"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"91"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"91"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"91"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"91"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"91"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/nick/dev/dockerman/src/index.js",["191"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './App';\nimport { homepage } from '../package.json';\n\nReactDOM.render(\n  <Router basename={homepage}>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["192","193"],"/home/nick/dev/dockerman/src/App.js",[],"/home/nick/dev/dockerman/src/reportWebVitals.js",[],"/home/nick/dev/dockerman/src/components/Header.js",[],"/home/nick/dev/dockerman/src/components/Button.js",[],"/home/nick/dev/dockerman/src/components/Footer.js",["194"],"import { ImGithub } from 'react-icons/im';\n\nconst Footer = () => {\n    return (\n        <div className='footer fixed-bottom'>\n            A simple docker GUI built with React    |    <a href=\"https://github.com/NickChubb/dockerman\" target=\"_blank\">Github <ImGithub /></a>\n        </div>\n    )\n}\n\nexport default Footer;\n","/home/nick/dev/dockerman/src/components/api/container.js",[],"/home/nick/dev/dockerman/src/Routes.js",["195"],"import { useState } from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport useToken from './components/useToken';\n\n/**\n * Import all page components here\n */\nimport MainPage from './page/MainPage';\nimport ContainerPage from './page/ContainerPage';\nimport LoginPage from './page/LoginPage';\n\n/**\n * All routes go here.\n * Don't forget to import the components above after adding new route.\n */\nconst Routes = () => {\n\n    const { token, setToken } = useToken();\n\n    if(!token) {\n      return <LoginPage setToken={setToken} />\n    }\n\n    return (\n    <Switch>\n\n      <Route path=\"/container/:containerId\">\n        <ContainerPage />\n      </Route>\n\n      <Route path=\"/\">\n        <MainPage />\n      </Route>\n\n    </Switch>\n    )\n}\n\nexport default Routes;\n","/home/nick/dev/dockerman/src/page/ContainerPage.js",["196","197"],"import React from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchContainerInfo } from '../components/api/container';\nimport InfoField from '../components/InfoField';\n\n\nconst ContainerPage = () => {\n\n    let { containerId } = useParams();\n    let container = fetchContainerInfo(containerId).then((container) => {console.log(container)});\n\n    return (\n        <div className='display'>\n            <h2>{containerId}</h2>\n            {/* <InfoField title=\"Ports\" /> */}\n            {/* <h3>Logs</h3> */}\n\n        </div>\n    )\n}\n\nexport default ContainerPage;\n","/home/nick/dev/dockerman/src/page/MainPage.js",[],"/home/nick/dev/dockerman/src/page/LoginPage.js",[],"/home/nick/dev/dockerman/src/components/api/login.js",["198"],"import { homepage } from '../../../package.json';\n\n// \nexport const loginUser = async (credentials) => {\n    \n    let response = await fetch(`${homepage}/api/auth/login`, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(credentials)\n    });\n\n    let data = await response.json();\n    let status = response.status;\n\n    if (status != 200){\n        alert(data.error);\n        return false;\n    } else {\n        return data;\n    }\n}","/home/nick/dev/dockerman/src/components/useToken.js",[],"/home/nick/dev/dockerman/src/components/InfoField.js",[],"/home/nick/dev/dockerman/src/components/api/image.js",[],"/home/nick/dev/dockerman/src/components/SystemInfo.js",["199"],"import { fetchSystemInfo, fetchDockerVersion, fetchInfo } from './api/system.js';\nimport { formatBytes } from './api/helpers.js';\nimport { useState, useEffect } from 'react';\n\nconst SystemInfo = () => {\n\n    const [info, setInfo] = useState([]);\n    const [dockerInfo, setDockerInfo] = useState([]);\n    const [version, setVersion] = useState([]);\n\n    useEffect(() => {\n\n        const getInfo = async () => {\n            const systemInfo = await fetchInfo();\n            console.log(systemInfo);\n            setInfo(systemInfo);\n        }\n\n        const getDockerInfo = async () => {\n            const dockerInfo = await fetchSystemInfo();\n            console.log(dockerInfo);\n            setDockerInfo(dockerInfo);\n        }\n\n        const getDockerVersion = async () => {\n            const dockerVersion = await fetchDockerVersion();\n            setVersion(dockerVersion);\n        }\n\n        getInfo();\n        getDockerInfo();\n        getDockerVersion();\n    }, []); \n\n    return (\n        <span>\n            <strong>Docker Size:</strong> {formatBytes(info.LayersSize)} | <strong>Docker Version:</strong> {version.Version} | \n        </span>\n    )\n}\n\nexport default SystemInfo\n","/home/nick/dev/dockerman/src/components/api/system.js",[],"/home/nick/dev/dockerman/src/components/api/helpers.js",[],"/home/nick/dev/dockerman/src/components/api/db.js",[],"/home/nick/dev/dockerman/src/components/screens/Display.js",["200"],"/home/nick/dev/dockerman/src/components/screens/repos/DisplayRepo.js",[],"/home/nick/dev/dockerman/src/components/screens/repos/DisplayNew.js",[],"/home/nick/dev/dockerman/src/components/screens/containers/DisplayContainers.js",[],"/home/nick/dev/dockerman/src/components/screens/images/DisplayImages.js",[],"/home/nick/dev/dockerman/src/components/screens/config/DisplayConfig.js",["201","202","203","204","205","206","207"],"import React, { useState, useEffect } from 'react';\nimport ConfigGroup from \"./ConfigGroup.js\";\nimport { fetchConfig, updateConfig } from \"../../api/system\";\nimport Button from '../../Button';\nimport { Link, useHistory } from 'react-router-dom';\nimport { Form, Row, Col, InputGroup, FormControl } from 'react-bootstrap';\nimport Tabs from '../Tabs.js';\n\n\nconst DisplayConfig = () => {\n\n    let history = useHistory();\n\n    const [config, setConfig] = useState();\n\n    useEffect(() => {\n        const getConfig = async () => {\n            const configFromServer = await fetchConfig();\n            setConfig(configFromServer);\n        }\n\n        getConfig();\n    }, []);\n\n    const handleSubmit = (evt) => {\n        evt.preventDefault();\n\n        let newConfig = config;\n\n        console.log(JSON.stringify(newConfig));\n\n        // process evt target values to update new config.\n        Object.entries(evt.target).forEach(( [index, param] ) => {\n            // console.log(param.value);\n\n            let name = param.name;\n            let value = param.value;\n\n            if ( typeof  value != \"undefined\" && name != \"\") {\n                \n                // console.log(name + \": \" + value);\n\n                // Get config groups\n                Object.entries(newConfig).forEach(( [groupTitle, configGroup] ) => {\n                    \n                    // console.log(\"groupTitle: \" + groupTitle);\n\n                    // Search config group for key that matches\n                    Object.entries(configGroup).forEach(( [paramName, paramValue] ) => {\n                        // console.log(\"paramName: \" + paramName + \" == name: \" + name);\n                        if ( paramName == name ) {\n\n                            if ( typeof paramValue == \"boolean\" ) {\n                                // Case for parameter is boolean\n                                value = param.value === 'true';\n                                \n                            } else if ( typeof paramValue == \"number\" ) {\n                                // Case for parameter is number\n                                value = parseInt(param.value);\n                            }\n\n                            console.log(\"Attemping to set paramValue to: \" + value);\n                            // console.log(typeof value );\n                            newConfig[groupTitle][paramName] = value;\n                        }\n                    })\n                })\n            }\n        });\n\n        // console.log(JSON.stringify(newConfig));\n        updateConfig(newConfig);\n        history.push('/');\n    }\n\n    return (\n        <>\n            <Tabs page=\"Config\" />\n            <h3 className=\"topbar\">\n                {/* <Button text=\"save\" onClick={handleSubmit}/> */}\n            </h3>\n            <Form onSubmit={handleSubmit}>\n                <Button variant=\"primary\" color=\"dodgerblue\" name=\"submit\" type=\"submit\" text=\"save\" />   \n                { typeof config == \"undefined\" ?\n                    <div className='container'>ERROR: config file not found.</div>\n                    : \n                    Object.entries(config).map(( [groupTitle, configGroup] ) => (\n                        <ConfigGroup setConfig={setConfig} groupTitle={groupTitle} configGroup={configGroup} />\n                    ))\n                }\n            </Form>\n        </>\n    )\n}\n\nexport default DisplayConfig;\n","/home/nick/dev/dockerman/src/components/screens/repos/Repos.js",["208"],"import Repo from './Repo.js';\nimport { Link } from 'react-router-dom';\n\nconst Repos = ({ repos }) => {\n    return (\n        <>\n            {\n                repos.legth != 0\n                ?\n                <div className='container'>No Containers, <Link to={'/new'}>click here</Link> to add new Container.</div> \n                : \n                repos.map((repo, i) => (\n                    <Repo key={i} repo={repo} />\n                ))\n            }\n        </>\n    )\n}\n\nexport default Repos;\n","/home/nick/dev/dockerman/src/components/screens/containers/Containers.js",[],"/home/nick/dev/dockerman/src/components/screens/images/Images.js",[],"/home/nick/dev/dockerman/src/components/screens/config/ConfigGroup.js",[],"/home/nick/dev/dockerman/src/components/screens/images/Image.js",[],"/home/nick/dev/dockerman/src/components/screens/repos/Repo.js",[],"/home/nick/dev/dockerman/src/components/screens/containers/Container.js",["209"],"import Button from '../../Button';\nimport Status from './Status';\nimport Serve from './Serve';\nimport { Link } from 'react-router-dom';\n\nconst Container = ({container, key}) => {\n\n    const name = container.Names[0].substring(1);\n\n    return (\n        <div className='container'>\n            <Link to={`/container/${name}`}>\n                <h2>{name}</h2>\n            </Link>\n            <div className='container-controls'>\n                <Status state={container.State} id={name} />\n                <Serve ports={container.Ports} id={name} name={name} />\n            </div>\n        </div>\n    )\n}\n\n// Container.defaultProps = {\n//     title: 'Container',\n// }\n\nexport default Container;\n","/home/nick/dev/dockerman/src/components/screens/config/ConfigParameter.js",["210","211","212","213","214"],"import { Form, Row, Col, InputGroup, FormControl } from 'react-bootstrap';\nimport TextParameter from './TextParameter.js';\nimport BoolParameter from './BoolParameter.js';\n\nconst ConfigGroup = ({ setConfig, param, value }) => {\n\n    // Depending on the type of value for the config parameter,\n    // Gets a different component which handles the different cases.\n    const getValueType = ( param, value ) => {\n\n        switch ( typeof value ) {\n            case \"number\":\n            case \"string\":\n                return (<TextParameter setConfig={setConfig} param={param} value={value} />);\n            case \"boolean\": \n                return (<BoolParameter setConfig={setConfig} param={param} value={value} />);\n            default:\n                return (<p>ERROR: Improperly formatted config option.</p>)\n        }\n    }\n\n    return (\n        <>\n            { getValueType(param, value) }\n        </>\n    )\n}\n\nexport default ConfigGroup;","/home/nick/dev/dockerman/src/components/screens/config/TextParameter.js",["215","216","217"],"import { Form, Row, Col, InputGroup, FormControl } from 'react-bootstrap';\n\nconst TextParameter = ({ setConfig, param, value }) => {\n\n    return (\n        <InputGroup className=\"form-parameter\">\n            <span> {param} </span>\n            <FormControl\n\t    \t    className=\"form-entry\"\n                    id={param}\n                    name={param}\n                    defaultValue={value}\n                    onChange={e => {\n                        \n                    }} \n                /> \n        </InputGroup>\n    )\n}\n\nexport default TextParameter;\n","/home/nick/dev/dockerman/src/components/screens/config/BoolParameter.js",["218","219","220","221"],"import { Form, Row, Col, InputGroup, FormControl } from 'react-bootstrap';\nimport { useState, useEffect } from 'react';\n\nconst BoolParameter = ({ param, value }) => {\n\n    const [ enabled, setEnabled ] = useState(value);\n\n    return (\n        <InputGroup>\n            <span> {param} </span>\n            {enabled ?\n                <Form.Check \n                    type=\"switch\" \n                    className=\"mb-2 mr-sm-2 form-entry\"  \n                    id={param}\n                    name={param}\n                    onChange={e => {\n                        setEnabled(e.target.checked);\n                    }}\n                    value={enabled}\n                    checked\n                />\n                :\n                <Form.Check \n                    type=\"switch\" \n                    className=\"mb-2 mr-sm-2 form-entry\"\n                    id={param}\n                    name={param}\n                    onChange={e => {\n                        setEnabled(e.target.checked);\n                    }}\n                    value={enabled}\n                />\n            } \n        </InputGroup>\n    )\n}\n\nexport default BoolParameter;","/home/nick/dev/dockerman/src/components/screens/containers/Status.js",["222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238"],"import Button from '../../Button';\nimport { useState, useEffect } from 'react';\nimport { startContainer, stopContainer, removeContainer,\n         restartContainer, fetchContainerInfo } from '../../api/container';\n\n\nconst Status = ({ containerState, id }) => {\n\n    const [state, setState] = useState(containerState);\n    \n    const getContainerState = async (expect = \"\") => {\n        let container = await fetchContainerInfo(id);\n        let status = container.State.Status;\n        if (expect == \"\" || expect == status ){\n            setState(status);\n        }\n        return status;\n    }\n\n    useEffect(() => {\n        getContainerState();\n    }, []);\n\n    const getState = (state) => {\n        console.log(\"state in getState: \" + state);\n        return state === 'running' ? '✅' : '🛑' ;\n    }\n\n    const stopOnClick = async (id) => {\n        const expected = \"exited\";\n\n        stopContainer(id);\n        let status = await getContainerState(expected);\n\n        if (status != expected) {\n            setState(\"loading\");\n        } \n        while (status != expected) {\n            let status = await getContainerState(expected);\n        }\n    }\n\n    const startOnClick = async (id) => {\n        const expected = \"running\";\n\n        startContainer(id); \n        let status = await getContainerState(expected);\n\n        if (status != expected) {\n            setState(\"loading\");\n        } \n        while (status != expected) {\n            status = await getContainerState(expected);\n        }\n    }\n\n    const removeOnClick = async (id) => {\n        const expected = \"running\";\n\n        removeContainer(id); \n        let status = await getContainerState(expected);\n\n        if (status != expected) {\n            setState(status);\n        } \n        while (status == \"removing\") {\n            status = await getContainerState(expected);\n        }\n    }\n\n    const restartOnClick = async (id) => {\n        const expected = \"running\";\n\n        restartContainer(id); \n        let status = await getContainerState(expected);\n\n        if (status != expected) {\n            setState(status);\n        }\n        while (status == \"restarting\") {\n            status = await getContainerState(expected);\n        }\n    }\n\n    const setButton = (status, id) => {\n        switch (status) {\n            case 'running': \n                return (\n                    <>\n                        <Button color='red' text='stop' onClick={() => { stopOnClick(id) }} />\n                        <Button color='blue' text='Restart' onClick={() => { restartOnClick(id) }} disabled={true}/>\n                    </>\n                );\n                break;\n            case 'exited':\n                return (\n                    <>\n                        <Button color='green' text='start' onClick={() => { startOnClick(id) }}/>\n                        <Button color='black' text='remove' onClick={() => { removeOnClick(id) }}/>\n                    </>\n                );\n                break;\n            case 'loading':\n                return (\n                    <>\n                        <Button color='grey' text='loading...' disabled={true} />\n                        <Button color='blue' text='Restart' onClick={() => { restartOnClick(id) }} disabled={true}/>\n                    </>\n                );\n                break;\n            case 'removing':\n                return (\n                    <>\n                        <Button color='grey' text='loading...' disabled={true} />\n                    </>\n                );\n                break;\n            default:\n                return (\n                    <>\n                        <Button color='black' text='remove' onClick={() => { removeOnClick(id) }}/>\n                        <Button color='blue' text='Restart' onClick={() => { restartOnClick(id) }} disabled={true}/>\n                    </>\n                );\n                break;\n        }\n    }\n\n    return (\n        <>\n            status: {getState(state)} <small>({state})</small>\n            {setButton(state, id)}\n        </>\n    )\n}\n\nexport default Status\n","/home/nick/dev/dockerman/src/components/screens/containers/Serve.js",["239","240","241","242","243","244","245"],"//import Button from './Button';\nimport { useState, useEffect } from 'react';\nimport { Form, Row, Col, InputGroup, FormControl } from 'react-bootstrap';\nimport { useHistory } from \"react-router-dom\";\nimport { updateService, getService } from '../../api/db.js';\nimport { fetchConfig } from '../../api/system.js';\nimport Button from '../../Button.js';\nimport { AiOutlineLink } from 'react-icons/ai';\n\nconst Serve = ({ ports, id, name }) => {\n\n    let defaultPort = ports[0] ? ports[0].PublicPort : \"0000\";\n    \n    const [domainName, setDomainName] = useState('');\n    const [enabled, setEnabled] = useState(false);\n    const [slug, setSlug] = useState('');\n    const [port, setPort] = useState(defaultPort);\n\n    useEffect(() => {\n        getService(name).then(service => {\n            setSlug(service.slug);\n            setEnabled(service.served);\n        });\n\n\tfetchConfig().then(config => {\n\t    setDomainName(config.domain.domainName);\n\t});\n\n    }, []);\n\n    const handleSubmit = (evt) => {\n        evt.preventDefault();\n        updateService(name, enabled, slug, port);\n    }\n\n    const getLink = () => {\n        return `https://${domainName}/${slug}/`;\n    }\n\n    return (\n        <Form className=\"form\" onSubmit={handleSubmit} inline>\n            {enabled ?\n                <Form.Check \n                    type=\"switch\" \n                    className=\"mb-2 mr-sm-2\" \n                    label=\"Serve\"\n                    id={\"on-switch-\" + name}\n                    onChange={e => {\n                        setEnabled(e.target.checked);\n                    }}\n                    value={enabled}\n                    checked\n                />\n                :\n                <Form.Check \n                    type=\"switch\" \n                    className=\"mb-2 mr-sm-2\" \n                    label=\"Serve\"\n                    id={\"on-switch-\" + name}\n                    onChange={e => {\n                        setEnabled(e.target.checked);\n                    }}\n                />\n            } \n\n            {enabled ? \n                <Form.Control as=\"select\" >\n                    {\n                        ports.map((port) => (\n                            <option>{port.PublicPort}</option>\n                        ))\n                    }\n                </Form.Control> \n                : \n                <Form.Control as=\"select\" disabled >\n                    <option>{defaultPort}</option>\n                </Form.Control>  \n            } \n            on\n            <InputGroup>\n                <InputGroup.Prepend>\n                    <InputGroup.Text>{domainName}/</InputGroup.Text>\n                </InputGroup.Prepend>\n                {enabled \n                    ? \n                    <FormControl \n                        id=\"slug\" \n                        onChange={e => {\n                            setSlug(e.target.value);\n                        }} \n                    /> \n                    : \n                    <FormControl value={slug} id=\"slug\" placeholder={name} disabled />\n                }\n                \n            </InputGroup>\n            \n            <a href={getLink()} target=\"_blank\"><AiOutlineLink /></a>\n            \n        </Form>\n    )\n}\n\nexport default Serve;\n","/home/nick/dev/dockerman/src/components/screens/log/DisplayLog.js",[],"/home/nick/dev/dockerman/src/components/screens/log/Log.js",["246","247"],"import LogEntry from './LogEntry.js';\n\nconst Log = ({log}) => {\n\n    return (\n        <div className='container'>\n            {log.map((entry) => (\n                    <LogEntry entry={entry} />\n            ))}\n            <div>\n                <a>back</a> \n                \n                <a>next</a>\n            </div>\n        </div>\n    )\n}\n\nexport default Log","/home/nick/dev/dockerman/src/components/screens/Tabs.js",[],"/home/nick/dev/dockerman/src/components/screens/log/LogEntry.js",[],"/home/nick/dev/dockerman/src/components/ToggleLink.js",["248","249"],"import { Link } from 'react-router-dom';\n\nconst ToggleLink = ({ to, title, page}) => {\n\n    if (page == \"DISABLED\") {\n        return (\n            <span className=\"disabled-link\">\n                {title}\n            </span>\n        )\n    } else if (title != page) {\n        return (\n            <Link to={to} className=\"unfocused\" >\n                {title}\n            </Link>\n        )\n    } else {\n        return (\n            <span className=\"subpage-header\">\n\t\t{title}\n\t    </span>\n\t)\n    }\n}\n\nexport default ToggleLink;\n","/home/nick/dev/dockerman/src/components/screens/git/DisplayGit.js",[],{"ruleId":"250","severity":1,"message":"251","line":3,"column":35,"nodeType":"252","messageId":"253","endLine":3,"endColumn":40},{"ruleId":"254","replacedBy":"255"},{"ruleId":"256","replacedBy":"257"},{"ruleId":"258","severity":1,"message":"259","line":6,"column":107,"nodeType":"260","endLine":6,"endColumn":122},{"ruleId":"250","severity":1,"message":"261","line":1,"column":10,"nodeType":"252","messageId":"253","endLine":1,"endColumn":18},{"ruleId":"250","severity":1,"message":"262","line":4,"column":8,"nodeType":"252","messageId":"253","endLine":4,"endColumn":17},{"ruleId":"250","severity":1,"message":"263","line":10,"column":9,"nodeType":"252","messageId":"253","endLine":10,"endColumn":18},{"ruleId":"264","severity":1,"message":"265","line":17,"column":16,"nodeType":"266","messageId":"267","endLine":17,"endColumn":18},{"ruleId":"250","severity":1,"message":"268","line":8,"column":12,"nodeType":"252","messageId":"253","endLine":8,"endColumn":22},{"ruleId":"250","severity":1,"message":"269","line":3,"column":8,"nodeType":"252","messageId":"253","endLine":3,"endColumn":19},{"ruleId":"250","severity":1,"message":"270","line":5,"column":10,"nodeType":"252","messageId":"253","endLine":5,"endColumn":14},{"ruleId":"250","severity":1,"message":"271","line":6,"column":16,"nodeType":"252","messageId":"253","endLine":6,"endColumn":19},{"ruleId":"250","severity":1,"message":"272","line":6,"column":21,"nodeType":"252","messageId":"253","endLine":6,"endColumn":24},{"ruleId":"250","severity":1,"message":"273","line":6,"column":26,"nodeType":"252","messageId":"253","endLine":6,"endColumn":36},{"ruleId":"250","severity":1,"message":"274","line":6,"column":38,"nodeType":"252","messageId":"253","endLine":6,"endColumn":49},{"ruleId":"264","severity":1,"message":"265","line":39,"column":55,"nodeType":"266","messageId":"267","endLine":39,"endColumn":57},{"ruleId":"264","severity":1,"message":"275","line":51,"column":40,"nodeType":"266","messageId":"267","endLine":51,"endColumn":42},{"ruleId":"264","severity":1,"message":"265","line":8,"column":29,"nodeType":"266","messageId":"267","endLine":8,"endColumn":31},{"ruleId":"250","severity":1,"message":"276","line":1,"column":8,"nodeType":"252","messageId":"253","endLine":1,"endColumn":14},{"ruleId":"250","severity":1,"message":"277","line":1,"column":10,"nodeType":"252","messageId":"253","endLine":1,"endColumn":14},{"ruleId":"250","severity":1,"message":"271","line":1,"column":16,"nodeType":"252","messageId":"253","endLine":1,"endColumn":19},{"ruleId":"250","severity":1,"message":"272","line":1,"column":21,"nodeType":"252","messageId":"253","endLine":1,"endColumn":24},{"ruleId":"250","severity":1,"message":"273","line":1,"column":26,"nodeType":"252","messageId":"253","endLine":1,"endColumn":36},{"ruleId":"250","severity":1,"message":"274","line":1,"column":38,"nodeType":"252","messageId":"253","endLine":1,"endColumn":49},{"ruleId":"250","severity":1,"message":"277","line":1,"column":10,"nodeType":"252","messageId":"253","endLine":1,"endColumn":14},{"ruleId":"250","severity":1,"message":"271","line":1,"column":16,"nodeType":"252","messageId":"253","endLine":1,"endColumn":19},{"ruleId":"250","severity":1,"message":"272","line":1,"column":21,"nodeType":"252","messageId":"253","endLine":1,"endColumn":24},{"ruleId":"250","severity":1,"message":"271","line":1,"column":16,"nodeType":"252","messageId":"253","endLine":1,"endColumn":19},{"ruleId":"250","severity":1,"message":"272","line":1,"column":21,"nodeType":"252","messageId":"253","endLine":1,"endColumn":24},{"ruleId":"250","severity":1,"message":"274","line":1,"column":38,"nodeType":"252","messageId":"253","endLine":1,"endColumn":49},{"ruleId":"250","severity":1,"message":"278","line":2,"column":20,"nodeType":"252","messageId":"253","endLine":2,"endColumn":29},{"ruleId":"264","severity":1,"message":"275","line":14,"column":20,"nodeType":"266","messageId":"267","endLine":14,"endColumn":22},{"ruleId":"264","severity":1,"message":"275","line":14,"column":36,"nodeType":"266","messageId":"267","endLine":14,"endColumn":38},{"ruleId":"279","severity":1,"message":"280","line":22,"column":8,"nodeType":"281","endLine":22,"endColumn":10,"suggestions":"282"},{"ruleId":"264","severity":1,"message":"265","line":35,"column":20,"nodeType":"266","messageId":"267","endLine":35,"endColumn":22},{"ruleId":"264","severity":1,"message":"265","line":38,"column":23,"nodeType":"266","messageId":"267","endLine":38,"endColumn":25},{"ruleId":"250","severity":1,"message":"283","line":39,"column":17,"nodeType":"252","messageId":"253","endLine":39,"endColumn":23},{"ruleId":"264","severity":1,"message":"265","line":49,"column":20,"nodeType":"266","messageId":"267","endLine":49,"endColumn":22},{"ruleId":"264","severity":1,"message":"265","line":52,"column":23,"nodeType":"266","messageId":"267","endLine":52,"endColumn":25},{"ruleId":"264","severity":1,"message":"265","line":63,"column":20,"nodeType":"266","messageId":"267","endLine":63,"endColumn":22},{"ruleId":"264","severity":1,"message":"275","line":66,"column":23,"nodeType":"266","messageId":"267","endLine":66,"endColumn":25},{"ruleId":"264","severity":1,"message":"265","line":77,"column":20,"nodeType":"266","messageId":"267","endLine":77,"endColumn":22},{"ruleId":"264","severity":1,"message":"275","line":80,"column":23,"nodeType":"266","messageId":"267","endLine":80,"endColumn":25},{"ruleId":"284","severity":1,"message":"285","line":94,"column":17,"nodeType":"286","messageId":"287","endLine":94,"endColumn":23},{"ruleId":"284","severity":1,"message":"285","line":102,"column":17,"nodeType":"286","messageId":"287","endLine":102,"endColumn":23},{"ruleId":"284","severity":1,"message":"285","line":110,"column":17,"nodeType":"286","messageId":"287","endLine":110,"endColumn":23},{"ruleId":"284","severity":1,"message":"285","line":117,"column":17,"nodeType":"286","messageId":"287","endLine":117,"endColumn":23},{"ruleId":"284","severity":1,"message":"285","line":125,"column":17,"nodeType":"286","messageId":"287","endLine":125,"endColumn":23},{"ruleId":"250","severity":1,"message":"271","line":3,"column":16,"nodeType":"252","messageId":"253","endLine":3,"endColumn":19},{"ruleId":"250","severity":1,"message":"272","line":3,"column":21,"nodeType":"252","messageId":"253","endLine":3,"endColumn":24},{"ruleId":"250","severity":1,"message":"288","line":4,"column":10,"nodeType":"252","messageId":"253","endLine":4,"endColumn":20},{"ruleId":"250","severity":1,"message":"276","line":7,"column":8,"nodeType":"252","messageId":"253","endLine":7,"endColumn":14},{"ruleId":"250","severity":1,"message":"289","line":17,"column":18,"nodeType":"252","messageId":"253","endLine":17,"endColumn":25},{"ruleId":"279","severity":1,"message":"290","line":29,"column":8,"nodeType":"281","endLine":29,"endColumn":10,"suggestions":"291"},{"ruleId":"258","severity":1,"message":"259","line":98,"column":33,"nodeType":"260","endLine":98,"endColumn":48},{"ruleId":"292","severity":1,"message":"293","line":11,"column":17,"nodeType":"294","endLine":11,"endColumn":20},{"ruleId":"292","severity":1,"message":"293","line":13,"column":17,"nodeType":"294","endLine":13,"endColumn":20},{"ruleId":"264","severity":1,"message":"275","line":5,"column":14,"nodeType":"266","messageId":"267","endLine":5,"endColumn":16},{"ruleId":"264","severity":1,"message":"265","line":11,"column":22,"nodeType":"266","messageId":"267","endLine":11,"endColumn":24},"no-unused-vars","'Route' is defined but never used.","Identifier","unusedVar","no-native-reassign",["295"],"no-negated-in-lhs",["296"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","'useState' is defined but never used.","'InfoField' is defined but never used.","'container' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'dockerInfo' is assigned a value but never used.","'DisplayRepo' is defined but never used.","'Link' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'InputGroup' is defined but never used.","'FormControl' is defined but never used.","Expected '===' and instead saw '=='.","'Button' is defined but never used.","'Form' is defined but never used.","'useEffect' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getContainerState'. Either include it or remove the dependency array.","ArrayExpression",["297"],"'status' is assigned a value but never used.","no-unreachable","Unreachable code.","BreakStatement","unreachableCode","'useHistory' is defined but never used.","'setPort' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'name'. Either include it or remove the dependency array.",["298"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"299","fix":"300"},{"desc":"301","fix":"302"},"Update the dependencies array to be: [getContainerState]",{"range":"303","text":"304"},"Update the dependencies array to be: [name]",{"range":"305","text":"306"},[652,654],"[getContainerState]",[952,954],"[name]"]