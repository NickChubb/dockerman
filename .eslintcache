[{"/home/nick/dev/dockerman/src/index.js":"1","/home/nick/dev/dockerman/src/App.js":"2","/home/nick/dev/dockerman/src/reportWebVitals.js":"3","/home/nick/dev/dockerman/src/components/Header.js":"4","/home/nick/dev/dockerman/src/components/Button.js":"5","/home/nick/dev/dockerman/src/components/Footer.js":"6","/home/nick/dev/dockerman/src/components/api/container.js":"7","/home/nick/dev/dockerman/src/Routes.js":"8","/home/nick/dev/dockerman/src/page/ContainerPage.js":"9","/home/nick/dev/dockerman/src/page/MainPage.js":"10","/home/nick/dev/dockerman/src/page/LoginPage.js":"11","/home/nick/dev/dockerman/src/components/api/login.js":"12","/home/nick/dev/dockerman/src/components/useToken.js":"13","/home/nick/dev/dockerman/src/components/InfoField.js":"14","/home/nick/dev/dockerman/src/components/api/image.js":"15","/home/nick/dev/dockerman/src/components/SystemInfo.js":"16","/home/nick/dev/dockerman/src/components/api/system.js":"17","/home/nick/dev/dockerman/src/components/api/helpers.js":"18","/home/nick/dev/dockerman/src/components/api/db.js":"19","/home/nick/dev/dockerman/src/components/screens/Display.js":"20","/home/nick/dev/dockerman/src/components/screens/repos/DisplayRepo.js":"21","/home/nick/dev/dockerman/src/components/screens/repos/DisplayNew.js":"22","/home/nick/dev/dockerman/src/components/screens/containers/DisplayContainers.js":"23","/home/nick/dev/dockerman/src/components/screens/images/DisplayImages.js":"24","/home/nick/dev/dockerman/src/components/screens/config/DisplayConfig.js":"25","/home/nick/dev/dockerman/src/components/screens/repos/Repos.js":"26","/home/nick/dev/dockerman/src/components/screens/containers/Containers.js":"27","/home/nick/dev/dockerman/src/components/screens/images/Images.js":"28","/home/nick/dev/dockerman/src/components/screens/config/ConfigGroup.js":"29","/home/nick/dev/dockerman/src/components/screens/images/Image.js":"30","/home/nick/dev/dockerman/src/components/screens/repos/Repo.js":"31","/home/nick/dev/dockerman/src/components/screens/containers/Container.js":"32","/home/nick/dev/dockerman/src/components/screens/config/ConfigParameter.js":"33","/home/nick/dev/dockerman/src/components/screens/config/TextParameter.js":"34","/home/nick/dev/dockerman/src/components/screens/config/BoolParameter.js":"35","/home/nick/dev/dockerman/src/components/screens/containers/Status.js":"36","/home/nick/dev/dockerman/src/components/screens/containers/Serve.js":"37"},{"size":658,"mtime":1612117584047,"results":"38","hashOfConfig":"39"},{"size":368,"mtime":1613463624079,"results":"40","hashOfConfig":"39"},{"size":362,"mtime":1610780794789,"results":"41","hashOfConfig":"39"},{"size":375,"mtime":1614378288166,"results":"42","hashOfConfig":"39"},{"size":222,"mtime":1612226446861,"results":"43","hashOfConfig":"39"},{"size":178,"mtime":1612232317317,"results":"44","hashOfConfig":"39"},{"size":1549,"mtime":1616801430728,"results":"45","hashOfConfig":"39"},{"size":798,"mtime":1614381150597,"results":"46","hashOfConfig":"39"},{"size":579,"mtime":1621817571036,"results":"47","hashOfConfig":"39"},{"size":203,"mtime":1622618506914,"results":"48","hashOfConfig":"39"},{"size":1327,"mtime":1612132887900,"results":"49","hashOfConfig":"39"},{"size":492,"mtime":1616439000308,"results":"50","hashOfConfig":"39"},{"size":528,"mtime":1612120829943,"results":"51","hashOfConfig":"39"},{"size":215,"mtime":1612231160814,"results":"52","hashOfConfig":"39"},{"size":459,"mtime":1616438598884,"results":"53","hashOfConfig":"39"},{"size":918,"mtime":1614383125198,"results":"54","hashOfConfig":"39"},{"size":1063,"mtime":1622663745189,"results":"55","hashOfConfig":"39"},{"size":373,"mtime":1614377722219,"results":"56","hashOfConfig":"39"},{"size":616,"mtime":1617505809966,"results":"57","hashOfConfig":"39"},{"size":1016,"mtime":1622618594614,"results":"58","hashOfConfig":"39"},{"size":993,"mtime":1622618310941,"results":"59","hashOfConfig":"39"},{"size":2730,"mtime":1622618311873,"results":"60","hashOfConfig":"39"},{"size":1212,"mtime":1622618177797,"results":"61","hashOfConfig":"39"},{"size":1048,"mtime":1622618221773,"results":"62","hashOfConfig":"39"},{"size":3317,"mtime":1622834543908,"results":"63","hashOfConfig":"39"},{"size":500,"mtime":1622618255167,"results":"64","hashOfConfig":"39"},{"size":269,"mtime":1622618172814,"results":"65","hashOfConfig":"39"},{"size":240,"mtime":1622618214918,"results":"66","hashOfConfig":"39"},{"size":423,"mtime":1622783985622,"results":"67","hashOfConfig":"39"},{"size":193,"mtime":1622618213774,"results":"68","hashOfConfig":"39"},{"size":254,"mtime":1622618303485,"results":"69","hashOfConfig":"39"},{"size":707,"mtime":1622618858734,"results":"70","hashOfConfig":"39"},{"size":864,"mtime":1622668316529,"results":"71","hashOfConfig":"39"},{"size":560,"mtime":1622783677393,"results":"72","hashOfConfig":"39"},{"size":1143,"mtime":1622915045845,"results":"73","hashOfConfig":"39"},{"size":4053,"mtime":1622618302561,"results":"74","hashOfConfig":"39"},{"size":3037,"mtime":1622831013974,"results":"75","hashOfConfig":"39"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"79"},"12zq7o2",{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"79"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"79"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"79"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"79"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"79"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"79"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"79"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"79"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"156","messages":"157","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"79"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"79"},"/home/nick/dev/dockerman/src/index.js",["162"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './App';\nimport { homepage } from '../package.json';\n\nReactDOM.render(\n  <Router basename={homepage}>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["163","164"],"/home/nick/dev/dockerman/src/App.js",[],"/home/nick/dev/dockerman/src/reportWebVitals.js",[],"/home/nick/dev/dockerman/src/components/Header.js",[],"/home/nick/dev/dockerman/src/components/Button.js",[],"/home/nick/dev/dockerman/src/components/Footer.js",[],"/home/nick/dev/dockerman/src/components/api/container.js",[],"/home/nick/dev/dockerman/src/Routes.js",["165"],"import React, { useState } from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport useToken from './components/useToken';\n\n/**\n * Import all page components here\n */\nimport MainPage from './page/MainPage';\nimport ContainerPage from './page/ContainerPage';\nimport LoginPage from './page/LoginPage';\n\n/**\n * All routes go here.\n * Don't forget to import the components above after adding new route.\n */\nconst Routes = () => {\n\n    const { token, setToken } = useToken();\n\n    if(!token) {\n      return <LoginPage setToken={setToken} />\n    }\n\n    return (\n    <Switch>\n        \n        <Route path=\"/container/:containerId\">\n          <ContainerPage />\n        </Route>\n\n        <Route path=\"/\">\n          <MainPage />\n        </Route>\n\n      </Switch>\n    )\n}\n\nexport default Routes;\n","/home/nick/dev/dockerman/src/page/ContainerPage.js",["166","167"],"import React from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchContainerInfo } from '../components/api/container';\nimport InfoField from '../components/InfoField';\n\n\nconst ContainerPage = () => {\n\n    let { containerId } = useParams();\n    let container = fetchContainerInfo(containerId).then((container) => {console.log(container)});\n\n    return (\n        <div className='display'>\n            <h2>{containerId}</h2>\n            {/* <InfoField title=\"Ports\" /> */}\n            {/* <h3>Logs</h3> */}\n\n        </div>\n    )\n}\n\nexport default ContainerPage;\n","/home/nick/dev/dockerman/src/page/MainPage.js",[],"/home/nick/dev/dockerman/src/page/LoginPage.js",[],"/home/nick/dev/dockerman/src/components/api/login.js",["168"],"import { homepage } from '../../../package.json';\n\n// \nexport const loginUser = async (credentials) => {\n    \n    let response = await fetch(`${homepage}/api/auth/login`, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(credentials)\n    });\n\n    let status = response.status;\n    if (status != 200){\n        alert('ERROR: invalid credentials.');\n    }\n\n    let data = await response.json();\n    return data;\n}","/home/nick/dev/dockerman/src/components/useToken.js",[],"/home/nick/dev/dockerman/src/components/InfoField.js",[],"/home/nick/dev/dockerman/src/components/api/image.js",[],"/home/nick/dev/dockerman/src/components/SystemInfo.js",[],"/home/nick/dev/dockerman/src/components/api/system.js",[],"/home/nick/dev/dockerman/src/components/api/helpers.js",[],"/home/nick/dev/dockerman/src/components/api/db.js",[],"/home/nick/dev/dockerman/src/components/screens/Display.js",[],"/home/nick/dev/dockerman/src/components/screens/repos/DisplayRepo.js",[],"/home/nick/dev/dockerman/src/components/screens/repos/DisplayNew.js",[],"/home/nick/dev/dockerman/src/components/screens/containers/DisplayContainers.js",[],"/home/nick/dev/dockerman/src/components/screens/images/DisplayImages.js",[],"/home/nick/dev/dockerman/src/components/screens/config/DisplayConfig.js",["169","170","171","172","173","174"],"import React, { useState, useEffect } from 'react';\nimport ConfigGroup from \"./ConfigGroup.js\";\nimport { fetchConfig, updateConfig } from \"../../api/system\";\nimport Button from '../../Button';\nimport { Link, useHistory } from 'react-router-dom';\nimport { Form, Row, Col, InputGroup, FormControl } from 'react-bootstrap';\n\n\nconst DisplayConfig = () => {\n\n    let history = useHistory();\n\n    const [config, setConfig] = useState();\n\n    useEffect(() => {\n        const getConfig = async () => {\n            const configFromServer = await fetchConfig();\n            setConfig(configFromServer);\n        }\n\n        getConfig();\n    }, []);\n\n    const handleSubmit = (evt) => {\n        evt.preventDefault();\n\n        let newConfig = config;\n\n        console.log(JSON.stringify(newConfig));\n\n        // process evt target values to update new config.\n        Object.entries(evt.target).forEach(( [index, param] ) => {\n            // console.log(param.value);\n\n            let name = param.name;\n            let value = param.value;\n\n            if ( typeof  value != \"undefined\" && name != \"\") {\n                \n                // console.log(name + \": \" + value);\n\n                // Get config groups\n                Object.entries(newConfig).forEach(( [groupTitle, configGroup] ) => {\n                    \n                    // console.log(\"groupTitle: \" + groupTitle);\n\n                    // Search config group for key that matches\n                    Object.entries(configGroup).forEach(( [paramName, paramValue] ) => {\n                        // console.log(\"paramName: \" + paramName + \" == name: \" + name);\n                        if ( paramName == name ) {\n\n                            if ( typeof paramValue == \"boolean\") {\n                                value = param.value === 'true';\n                            }\n\n                            console.log(\"Attemping to set paramValue to: \" + value);\n                            // console.log(typeof value );\n                            newConfig[groupTitle][paramName] = value;\n                        }\n                    })\n                })\n            }\n        });\n\n        // console.log(JSON.stringify(newConfig));\n        updateConfig(newConfig);\n        history.push('/');\n    }\n\n    return (\n        <>\n            <h2>\n                <Link to=\"/\" className=\"unfocused\">Containers</Link>\n                <Link to=\"/images\" className=\"unfocused\">Images</Link>\n                <Link to=\"/repo\" className=\"unfocused\">Repo</Link>\n                <span className=\"subpage-header\">Config</span>\n            </h2>\n            <h3 className=\"topbar\">\n                {/* <Button text=\"save\" onClick={handleSubmit}/> */}\n            </h3>\n            <Form onSubmit={handleSubmit}>\n                <Button variant=\"primary\" color=\"dodgerblue\" name=\"submit\" type=\"submit\" text=\"save\" />   \n                { typeof config == \"undefined\" ?\n                    <div className='container'>ERROR: config file not found.</div>\n                    : \n                    Object.entries(config).map(( [groupTitle, configGroup] ) => (\n                        <ConfigGroup setConfig={setConfig} groupTitle={groupTitle} configGroup={configGroup} />\n                    ))\n                }\n            </Form>\n        </>\n    )\n}\n\nexport default DisplayConfig;\n","/home/nick/dev/dockerman/src/components/screens/repos/Repos.js",["175"],"import Repo from './Repo.js';\nimport { Link } from 'react-router-dom';\n\nconst Repos = ({ repos }) => {\n    return (\n        <>\n            {\n                repos.legth != 0\n                ?\n                <div className='container'>No Containers, <Link to={'/new'}>click here</Link> to add new Container.</div> \n                : \n                repos.map((repo, i) => (\n                    <Repo key={i} repo={repo} />\n                ))\n            }\n        </>\n    )\n}\n\nexport default Repos;\n","/home/nick/dev/dockerman/src/components/screens/containers/Containers.js",[],"/home/nick/dev/dockerman/src/components/screens/images/Images.js",[],"/home/nick/dev/dockerman/src/components/screens/config/ConfigGroup.js",[],"/home/nick/dev/dockerman/src/components/screens/images/Image.js",[],"/home/nick/dev/dockerman/src/components/screens/repos/Repo.js",[],"/home/nick/dev/dockerman/src/components/screens/containers/Container.js",["176"],"import Button from '../../Button';\nimport Status from './Status';\nimport Serve from './Serve';\nimport { Link } from 'react-router-dom';\n\nconst Container = ({container, key}) => {\n\n    const name = container.Names[0].substring(1);\n\n    return (\n        <div className='container'>\n            <Link to={`/container/${name}`}>\n                <h2>{name}</h2>\n            </Link>\n            <div className='container-controls'>\n                <Status state={container.State} id={container.Id} />\n                <Serve ports={container.Ports} id={container.Id} name={name} />\n            </div>\n        </div>\n    )\n}\n\n// Container.defaultProps = {\n//     title: 'Container',\n// }\n\nexport default Container;\n","/home/nick/dev/dockerman/src/components/screens/config/ConfigParameter.js",["177","178","179","180","181"],"import { Form, Row, Col, InputGroup, FormControl } from 'react-bootstrap';\nimport TextParameter from './TextParameter.js';\nimport BoolParameter from './BoolParameter.js';\n\nconst ConfigGroup = ({ setConfig, param, value }) => {\n\n    // Depending on the type of value for the config parameter,\n    // Gets a different component which handles the different cases.\n    const getValueType = ( param, value ) => {\n\n        switch ( typeof value ) {\n            case \"string\" :\n                return (<TextParameter setConfig={setConfig} param={param} value={value} />);\n            case \"boolean\": \n                return (<BoolParameter setConfig={setConfig} param={param} value={value} />);\n            default:\n                break;\n        }\n    }\n\n    return (\n        <>\n            { getValueType(param, value) }\n        </>\n    )\n}\n\nexport default ConfigGroup;","/home/nick/dev/dockerman/src/components/screens/config/TextParameter.js",["182","183","184"],"import { Form, Row, Col, InputGroup, FormControl } from 'react-bootstrap';\n\nconst TextParameter = ({ setConfig, param, value }) => {\n\n    return (\n        <InputGroup className=\"form-parameter\">\n            <span> {param} </span>\n            <FormControl\n\t    \t    className=\"form-entry\"\n                    id={param}\n                    name={param}\n                    defaultValue={value}\n                    onChange={e => {\n                        \n                    }} \n                /> \n        </InputGroup>\n    )\n}\n\nexport default TextParameter;\n","/home/nick/dev/dockerman/src/components/screens/config/BoolParameter.js",["185","186","187","188"],"/home/nick/dev/dockerman/src/components/screens/containers/Status.js",["189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205"],"import Button from '../../Button';\nimport { useState, useEffect } from 'react';\nimport { startContainer, stopContainer, removeContainer, fetchContainerInfo } from '../../api/container';\n\n\nconst Status = ({ containerState, id }) => {\n\n    const [state, setState] = useState(containerState);\n    \n    const getContainerState = async (expect = \"\") => {\n        let container = await fetchContainerInfo(id);\n        let status = container.State.Status;\n        if (expect == \"\" || expect == status ){\n            setState(status);\n        }\n        return status;\n    }\n\n    useEffect(() => {\n        getContainerState();\n    }, []);\n\n    const getState = (state) => {\n        console.log(\"state in getState: \" + state);\n        return state === 'running' ? '✅' : '🛑' ;\n    }\n\n    const stopOnClick = async (id) => {\n        const expected = \"exited\";\n\n        stopContainer(id);\n        let status = await getContainerState(expected);\n\n        if (status != expected) {\n            setState(\"loading\");\n        } \n        while (status != expected) {\n            let status = await getContainerState(expected);\n        }\n    }\n\n    const startOnClick = async (id) => {\n        const expected = \"running\";\n\n        startContainer(id); \n        let status = await getContainerState(expected);\n\n        if (status != expected) {\n            setState(\"loading\");\n        } \n        while (status != expected) {\n            status = await getContainerState(expected);\n        }\n    }\n\n    const removeOnClick = async (id) => {\n        const expected = \"running\";\n\n        removeContainer(id); \n        let status = await getContainerState(expected);\n\n        if (status != expected) {\n            setState(status);\n        } \n        while (status == \"removing\") {\n            status = await getContainerState(expected);\n        }\n    }\n\n    const restartOnClick = async (id) => {\n        const expected = \"running\";\n\n        // removeContainer(id); \n        let status = await getContainerState(expected);\n\n        if (status != expected) {\n            setState(status);\n        }\n        while (status == \"restarting\") {\n            status = await getContainerState(expected);\n        }\n    }\n\n    const setButton = (status, id) => {\n        switch (status) {\n            case 'running': \n                return (\n                    <>\n                        <Button color='red' text='stop' onClick={() => { stopOnClick(id) }} />\n                        <Button color='blue' text='Restart' onClick={() => { restartOnClick(id) }} disabled={true}/>\n                    </>\n                );\n                break;\n            case 'exited':\n                return (\n                    <>\n                        <Button color='green' text='start' onClick={() => { startOnClick(id) }}/>\n                        <Button color='black' text='remove' onClick={() => { removeOnClick(id) }}/>\n                    </>\n                );\n                break;\n            case 'loading':\n                return (\n                    <>\n                        <Button color='grey' text='loading...' disabled={true} />\n                        <Button color='blue' text='Restart' onClick={() => { restartOnClick(id) }} disabled={true}/>\n                    </>\n                );\n                break;\n            case 'removing':\n                return (\n                    <>\n                        <Button color='grey' text='loading...' disabled={true} />\n                    </>\n                );\n                break;\n            default:\n                return (\n                    <>\n                        <Button color='black' text='remove' onClick={() => { removeOnClick(id) }}/>\n                        <Button color='blue' text='Restart' onClick={() => { restartOnClick(id) }} disabled={true}/>\n                    </>\n                );\n                break;\n        }\n    }\n\n    return (\n        <>\n            status: {getState(state)} <small>({state})</small>\n            {setButton(state, id)}\n        </>\n    )\n}\n\nexport default Status\n","/home/nick/dev/dockerman/src/components/screens/containers/Serve.js",["206","207","208","209","210","211"],"//import Button from './Button';\nimport { useState, useEffect } from 'react';\nimport { Form, Row, Col, InputGroup, FormControl } from 'react-bootstrap';\nimport { useHistory } from \"react-router-dom\";\nimport { updateService, getService } from '../../api/db.js';\nimport { fetchConfig } from '../../api/system.js';\nimport Button from '../../Button.js';\n\nconst Serve = ({ ports, id, name }) => {\n\n    let defaultPort = ports[0] ? ports[0].PublicPort : \"0000\";\n    \n    const [domainName, setDomainName] = useState('');\n    const [enabled, setEnabled] = useState(false);\n    const [slug, setSlug] = useState('');\n    const [port, setPort] = useState(defaultPort);\n\n    useEffect(() => {\n        getService(name).then(service => {\n            setSlug(service.slug);\n            setEnabled(service.served);\n        });\n\n\tfetchConfig().then(config => {\n\t    setDomainName(config.domain.domainName);\n\t});\n\n    }, []);\n\n    const handleSubmit = (evt) => {\n        evt.preventDefault();\n        updateService(name, enabled, slug, port);\n    }\n\n    return (\n        <Form className=\"form\" onSubmit={handleSubmit} inline>\n            {enabled ?\n                <Form.Check \n                    type=\"switch\" \n                    className=\"mb-2 mr-sm-2\" \n                    label=\"Serve\"\n                    id={\"on-switch-\" + name}\n                    onChange={e => {\n                        setEnabled(e.target.checked);\n                    }}\n                    value={enabled}\n                    checked\n                />\n                :\n                <Form.Check \n                    type=\"switch\" \n                    className=\"mb-2 mr-sm-2\" \n                    label=\"Serve\"\n                    id={\"on-switch-\" + name}\n                    onChange={e => {\n                        setEnabled(e.target.checked);\n                    }}\n                />\n            } \n\n            {enabled ? \n                <Form.Control as=\"select\" >\n                    {\n                        ports.map((port) => (\n                            <option>{port.PublicPort}</option>\n                        ))\n                    }\n                </Form.Control> \n                : \n                <Form.Control as=\"select\" disabled >\n                    <option>{defaultPort}</option>\n                </Form.Control>  \n            } \n            on\n            <InputGroup>\n                <InputGroup.Prepend>\n                    <InputGroup.Text>{domainName}/</InputGroup.Text>\n                </InputGroup.Prepend>\n                {enabled \n                    ? \n                    <FormControl \n                        id=\"slug\" \n                        onChange={e => {\n                            setSlug(e.target.value);\n                        }} \n                    /> \n                    : \n                    <FormControl value={slug} id=\"slug\" placeholder={name} disabled />\n                }\n                \n            </InputGroup>\n            \n                 \n            \n        </Form>\n    )\n}\n\nexport default Serve;\n",{"ruleId":"212","severity":1,"message":"213","line":3,"column":35,"nodeType":"214","messageId":"215","endLine":3,"endColumn":40},{"ruleId":"216","replacedBy":"217"},{"ruleId":"218","replacedBy":"219"},{"ruleId":"212","severity":1,"message":"220","line":1,"column":17,"nodeType":"214","messageId":"215","endLine":1,"endColumn":25},{"ruleId":"212","severity":1,"message":"221","line":4,"column":8,"nodeType":"214","messageId":"215","endLine":4,"endColumn":17},{"ruleId":"212","severity":1,"message":"222","line":10,"column":9,"nodeType":"214","messageId":"215","endLine":10,"endColumn":18},{"ruleId":"223","severity":1,"message":"224","line":15,"column":16,"nodeType":"225","messageId":"226","endLine":15,"endColumn":18},{"ruleId":"212","severity":1,"message":"227","line":6,"column":16,"nodeType":"214","messageId":"215","endLine":6,"endColumn":19},{"ruleId":"212","severity":1,"message":"228","line":6,"column":21,"nodeType":"214","messageId":"215","endLine":6,"endColumn":24},{"ruleId":"212","severity":1,"message":"229","line":6,"column":26,"nodeType":"214","messageId":"215","endLine":6,"endColumn":36},{"ruleId":"212","severity":1,"message":"230","line":6,"column":38,"nodeType":"214","messageId":"215","endLine":6,"endColumn":49},{"ruleId":"223","severity":1,"message":"224","line":38,"column":55,"nodeType":"225","messageId":"226","endLine":38,"endColumn":57},{"ruleId":"223","severity":1,"message":"231","line":50,"column":40,"nodeType":"225","messageId":"226","endLine":50,"endColumn":42},{"ruleId":"223","severity":1,"message":"224","line":8,"column":29,"nodeType":"225","messageId":"226","endLine":8,"endColumn":31},{"ruleId":"212","severity":1,"message":"232","line":1,"column":8,"nodeType":"214","messageId":"215","endLine":1,"endColumn":14},{"ruleId":"212","severity":1,"message":"233","line":1,"column":10,"nodeType":"214","messageId":"215","endLine":1,"endColumn":14},{"ruleId":"212","severity":1,"message":"227","line":1,"column":16,"nodeType":"214","messageId":"215","endLine":1,"endColumn":19},{"ruleId":"212","severity":1,"message":"228","line":1,"column":21,"nodeType":"214","messageId":"215","endLine":1,"endColumn":24},{"ruleId":"212","severity":1,"message":"229","line":1,"column":26,"nodeType":"214","messageId":"215","endLine":1,"endColumn":36},{"ruleId":"212","severity":1,"message":"230","line":1,"column":38,"nodeType":"214","messageId":"215","endLine":1,"endColumn":49},{"ruleId":"212","severity":1,"message":"233","line":1,"column":10,"nodeType":"214","messageId":"215","endLine":1,"endColumn":14},{"ruleId":"212","severity":1,"message":"227","line":1,"column":16,"nodeType":"214","messageId":"215","endLine":1,"endColumn":19},{"ruleId":"212","severity":1,"message":"228","line":1,"column":21,"nodeType":"214","messageId":"215","endLine":1,"endColumn":24},{"ruleId":"212","severity":1,"message":"227","line":1,"column":16,"nodeType":"214","messageId":"215","endLine":1,"endColumn":19},{"ruleId":"212","severity":1,"message":"228","line":1,"column":21,"nodeType":"214","messageId":"215","endLine":1,"endColumn":24},{"ruleId":"212","severity":1,"message":"230","line":1,"column":38,"nodeType":"214","messageId":"215","endLine":1,"endColumn":49},{"ruleId":"212","severity":1,"message":"234","line":2,"column":20,"nodeType":"214","messageId":"215","endLine":2,"endColumn":29},{"ruleId":"223","severity":1,"message":"231","line":13,"column":20,"nodeType":"225","messageId":"226","endLine":13,"endColumn":22},{"ruleId":"223","severity":1,"message":"231","line":13,"column":36,"nodeType":"225","messageId":"226","endLine":13,"endColumn":38},{"ruleId":"235","severity":1,"message":"236","line":21,"column":8,"nodeType":"237","endLine":21,"endColumn":10,"suggestions":"238"},{"ruleId":"223","severity":1,"message":"224","line":34,"column":20,"nodeType":"225","messageId":"226","endLine":34,"endColumn":22},{"ruleId":"223","severity":1,"message":"224","line":37,"column":23,"nodeType":"225","messageId":"226","endLine":37,"endColumn":25},{"ruleId":"212","severity":1,"message":"239","line":38,"column":17,"nodeType":"214","messageId":"215","endLine":38,"endColumn":23},{"ruleId":"223","severity":1,"message":"224","line":48,"column":20,"nodeType":"225","messageId":"226","endLine":48,"endColumn":22},{"ruleId":"223","severity":1,"message":"224","line":51,"column":23,"nodeType":"225","messageId":"226","endLine":51,"endColumn":25},{"ruleId":"223","severity":1,"message":"224","line":62,"column":20,"nodeType":"225","messageId":"226","endLine":62,"endColumn":22},{"ruleId":"223","severity":1,"message":"231","line":65,"column":23,"nodeType":"225","messageId":"226","endLine":65,"endColumn":25},{"ruleId":"223","severity":1,"message":"224","line":76,"column":20,"nodeType":"225","messageId":"226","endLine":76,"endColumn":22},{"ruleId":"223","severity":1,"message":"231","line":79,"column":23,"nodeType":"225","messageId":"226","endLine":79,"endColumn":25},{"ruleId":"240","severity":1,"message":"241","line":93,"column":17,"nodeType":"242","messageId":"243","endLine":93,"endColumn":23},{"ruleId":"240","severity":1,"message":"241","line":101,"column":17,"nodeType":"242","messageId":"243","endLine":101,"endColumn":23},{"ruleId":"240","severity":1,"message":"241","line":109,"column":17,"nodeType":"242","messageId":"243","endLine":109,"endColumn":23},{"ruleId":"240","severity":1,"message":"241","line":116,"column":17,"nodeType":"242","messageId":"243","endLine":116,"endColumn":23},{"ruleId":"240","severity":1,"message":"241","line":124,"column":17,"nodeType":"242","messageId":"243","endLine":124,"endColumn":23},{"ruleId":"212","severity":1,"message":"227","line":3,"column":16,"nodeType":"214","messageId":"215","endLine":3,"endColumn":19},{"ruleId":"212","severity":1,"message":"228","line":3,"column":21,"nodeType":"214","messageId":"215","endLine":3,"endColumn":24},{"ruleId":"212","severity":1,"message":"244","line":4,"column":10,"nodeType":"214","messageId":"215","endLine":4,"endColumn":20},{"ruleId":"212","severity":1,"message":"232","line":7,"column":8,"nodeType":"214","messageId":"215","endLine":7,"endColumn":14},{"ruleId":"212","severity":1,"message":"245","line":16,"column":18,"nodeType":"214","messageId":"215","endLine":16,"endColumn":25},{"ruleId":"235","severity":1,"message":"246","line":28,"column":8,"nodeType":"237","endLine":28,"endColumn":10,"suggestions":"247"},"no-unused-vars","'Route' is defined but never used.","Identifier","unusedVar","no-native-reassign",["248"],"no-negated-in-lhs",["249"],"'useState' is defined but never used.","'InfoField' is defined but never used.","'container' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'Row' is defined but never used.","'Col' is defined but never used.","'InputGroup' is defined but never used.","'FormControl' is defined but never used.","Expected '===' and instead saw '=='.","'Button' is defined but never used.","'Form' is defined but never used.","'useEffect' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getContainerState'. Either include it or remove the dependency array.","ArrayExpression",["250"],"'status' is assigned a value but never used.","no-unreachable","Unreachable code.","BreakStatement","unreachableCode","'useHistory' is defined but never used.","'setPort' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'name'. Either include it or remove the dependency array.",["251"],"no-global-assign","no-unsafe-negation",{"desc":"252","fix":"253"},{"desc":"254","fix":"255"},"Update the dependencies array to be: [getContainerState]",{"range":"256","text":"257"},"Update the dependencies array to be: [name]",{"range":"258","text":"259"},[625,627],"[getContainerState]",[904,906],"[name]"]