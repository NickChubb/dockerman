[{"/home/nick/dev/dockerman/src/index.js":"1","/home/nick/dev/dockerman/src/App.js":"2","/home/nick/dev/dockerman/src/reportWebVitals.js":"3","/home/nick/dev/dockerman/src/components/Header.js":"4","/home/nick/dev/dockerman/src/components/Button.js":"5","/home/nick/dev/dockerman/src/components/Status.js":"6","/home/nick/dev/dockerman/src/components/Display.js":"7","/home/nick/dev/dockerman/src/components/Footer.js":"8","/home/nick/dev/dockerman/src/components/Container.js":"9","/home/nick/dev/dockerman/src/components/Containers.js":"10","/home/nick/dev/dockerman/src/components/api/container.js":"11","/home/nick/dev/dockerman/src/Routes.js":"12","/home/nick/dev/dockerman/src/page/ContainerPage.js":"13","/home/nick/dev/dockerman/src/page/MainPage.js":"14","/home/nick/dev/dockerman/src/page/LoginPage.js":"15","/home/nick/dev/dockerman/src/components/api/login.js":"16","/home/nick/dev/dockerman/src/components/useToken.js":"17","/home/nick/dev/dockerman/src/components/InfoField.js":"18","/home/nick/dev/dockerman/src/components/Images.js":"19","/home/nick/dev/dockerman/src/components/api/image.js":"20","/home/nick/dev/dockerman/src/components/Image.js":"21"},{"size":658,"mtime":1612117584047,"results":"22","hashOfConfig":"23"},{"size":368,"mtime":1613463624079,"results":"24","hashOfConfig":"23"},{"size":362,"mtime":1610780794789,"results":"25","hashOfConfig":"23"},{"size":241,"mtime":1611991859622,"results":"26","hashOfConfig":"23"},{"size":222,"mtime":1612226446861,"results":"27","hashOfConfig":"23"},{"size":4045,"mtime":1613694439589,"results":"28","hashOfConfig":"23"},{"size":1308,"mtime":1613719521082,"results":"29","hashOfConfig":"23"},{"size":178,"mtime":1612232317317,"results":"30","hashOfConfig":"23"},{"size":595,"mtime":1613693870813,"results":"31","hashOfConfig":"23"},{"size":280,"mtime":1612412105174,"results":"32","hashOfConfig":"23"},{"size":1550,"mtime":1613693457461,"results":"33","hashOfConfig":"23"},{"size":1069,"mtime":1612120663677,"results":"34","hashOfConfig":"23"},{"size":563,"mtime":1612230908282,"results":"35","hashOfConfig":"23"},{"size":195,"mtime":1613718460054,"results":"36","hashOfConfig":"23"},{"size":1327,"mtime":1612132887900,"results":"37","hashOfConfig":"23"},{"size":544,"mtime":1612143838299,"results":"38","hashOfConfig":"23"},{"size":528,"mtime":1612120829943,"results":"39","hashOfConfig":"23"},{"size":215,"mtime":1612231160814,"results":"40","hashOfConfig":"23"},{"size":240,"mtime":1613719156622,"results":"41","hashOfConfig":"23"},{"size":276,"mtime":1613719668994,"results":"42","hashOfConfig":"23"},{"size":184,"mtime":1613719902694,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"47"},"12zq7o2",{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"47"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"47"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"47"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"47"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/nick/dev/dockerman/src/index.js",["93"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './App';\nimport { homepage } from '../package.json';\n\nReactDOM.render(\n  <Router basename={homepage}>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["94","95"],"/home/nick/dev/dockerman/src/App.js",[],"/home/nick/dev/dockerman/src/reportWebVitals.js",[],"/home/nick/dev/dockerman/src/components/Header.js",[],"/home/nick/dev/dockerman/src/components/Button.js",[],"/home/nick/dev/dockerman/src/components/Status.js",["96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112"],"import Button from './Button';\nimport { useState, useEffect } from 'react';\nimport { startContainer, stopContainer, removeContainer, fetchContainerInfo } from './api/container';\n\n\nconst Status = ({ containerState, id }) => {\n\n    const [state, setState] = useState(containerState);\n    \n    const getContainerState = async (expect = \"\") => {\n        let container = await fetchContainerInfo(id);\n        let status = container.State.Status;\n        if (expect == \"\" || expect == status ){\n            setState(status);\n        }\n        return status;\n    }\n\n    useEffect(() => {\n        getContainerState();\n    }, []);\n\n    const getState = (state) => {\n        console.log(\"state in getState: \" + state);\n        return state === 'running' ? 'âœ…' : 'ðŸ›‘' ;\n    }\n\n    const stopOnClick = async (id) => {\n        const expected = \"exited\";\n\n        stopContainer(id);\n        let status = await getContainerState(expected);\n\n        if (status != expected) {\n            setState(\"loading\");\n        } \n        while (status != expected) {\n            let status = await getContainerState(expected);\n        }\n    }\n\n    const startOnClick = async (id) => {\n        const expected = \"running\";\n\n        startContainer(id); \n        let status = await getContainerState(expected);\n\n        if (status != expected) {\n            setState(\"loading\");\n        } \n        while (status != expected) {\n            status = await getContainerState(expected);\n        }\n    }\n\n    const removeOnClick = async (id) => {\n        const expected = \"running\";\n\n        removeContainer(id); \n        let status = await getContainerState(expected);\n\n        if (status != expected) {\n            setState(status);\n        } \n        while (status == \"removing\") {\n            status = await getContainerState(expected);\n        }\n    }\n\n    const restartOnClick = async (id) => {\n        const expected = \"running\";\n\n        // removeContainer(id); \n        let status = await getContainerState(expected);\n\n        if (status != expected) {\n            setState(status);\n        }\n        while (status == \"restarting\") {\n            status = await getContainerState(expected);\n        }\n    }\n\n    const setButton = (status, id) => {\n        switch (status) {\n            case 'running': \n                return (\n                    <>\n                        <Button color='red' text='stop' onClick={() => { stopOnClick(id) }} />\n                        <Button color='blue' text='Restart' onClick={() => { restartOnClick(id) }} disabled={true}/>\n                    </>\n                );\n                break;\n            case 'exited':\n                return (\n                    <>\n                        <Button color='green' text='start' onClick={() => { startOnClick(id) }}/>\n                        <Button color='black' text='remove' onClick={() => { removeOnClick(id) }}/>\n                    </>\n                );\n                break;\n            case 'loading':\n                return (\n                    <>\n                        <Button color='grey' text='loading...' disabled={true} />\n                        <Button color='blue' text='Restart' onClick={() => { restartOnClick(id) }} disabled={true}/>\n                    </>\n                );\n                break;\n            case 'removing':\n                return (\n                    <>\n                        <Button color='grey' text='loading...' disabled={true} />\n                    </>\n                );\n                break;\n            default:\n                return (\n                    <>\n                        <Button color='black' text='remove' onClick={() => { removeOnClick(id) }}/>\n                        <Button color='blue' text='Restart' onClick={() => { restartOnClick(id) }} disabled={true}/>\n                    </>\n                );\n                break;\n        }\n    }\n\n    return (\n        <>\n            status: {getState(state)} <small>({state})</small>\n            {setButton(state, id)}\n        </>\n    )\n}\n\nexport default Status\n","/home/nick/dev/dockerman/src/components/Display.js",[],"/home/nick/dev/dockerman/src/components/Footer.js",[],"/home/nick/dev/dockerman/src/components/Container.js",["113","114"],"import Button from './Button';\nimport Status from './Status';\nimport { Link } from 'react-router-dom';\n\nconst Container = ({container, key}) => {\n\n    const name = container.Names[0].substring(1);\n\n    const restart = (id) => {\n        \n    }\n\n    return (\n        <div className='container'>\n            <Link to={`/container/${name}`}>\n                <h2>{container.Names[0].substring(1)}</h2>\n            </Link>\n            <Status state={container.State} id={container.Id} />\n        </div>\n    )\n}\n\n// Container.defaultProps = {\n//     title: 'Container',\n// }\n\nexport default Container;\n","/home/nick/dev/dockerman/src/components/Containers.js",[],"/home/nick/dev/dockerman/src/components/api/container.js",[],"/home/nick/dev/dockerman/src/Routes.js",["115"],"import React, { useState } from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport useToken from './components/useToken';\n\n/**\n * Import all page components here\n */\nimport MainPage from './page/MainPage';\nimport ContainerPage from './page/ContainerPage';\nimport LoginPage from './page/LoginPage';\n\n// function setToken(userToken) {\n//   sessionStorage.setItem('token', JSON.stringify(userToken));\n// }\n\n// function getToken() {\n//   const tokenString = sessionStorage.getItem('token');\n//   const userToken = JSON.parse(tokenString);\n//   return userToken?.token\n// }\n\n/**\n * All routes go here.\n * Don't forget to import the components above after adding new route.\n */\nconst Routes = () => {\n\n    const { token, setToken } = useToken();\n\n    if(!token) {\n      return <LoginPage setToken={setToken} />\n    }\n\n    return (\n    <Switch>\n        \n        <Route path=\"/container/:containerId\">\n          <ContainerPage />\n        </Route>\n\n        <Route path=\"/\">\n          <MainPage />\n        </Route>\n\n      </Switch>\n    )\n}\n\nexport default Routes;\n","/home/nick/dev/dockerman/src/page/ContainerPage.js",["116"],"import React from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchContainerInfo } from '../components/api/container';\nimport InfoField from '../components/InfoField';\n\n\nconst ContainerPage = () => {\n\n    let { containerId } = useParams();\n    let container = fetchContainerInfo(containerId).then((container) => {console.log(container)});\n\n    return (\n        <div className='display'>\n            <h2>{containerId}</h2>\n            <InfoField title=\"Ports\" />\n            <h3>Logs</h3>\n\n        </div>\n    )\n}\n\nexport default ContainerPage;\n","/home/nick/dev/dockerman/src/page/MainPage.js",[],"/home/nick/dev/dockerman/src/page/LoginPage.js",[],"/home/nick/dev/dockerman/src/components/api/login.js",["117"],"import { homepage } from '../../../package.json';\n\n// Fetch individual container from API based on ID and return it\nexport const loginUser = async (credentials) => {\n    \n    let response = await fetch(`${homepage}/login`, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(credentials)\n    });\n\n    let status = response.status;\n    if (status != 200){\n        alert('ERROR: invalid credentials.');\n    }\n\n    let data = await response.json();\n    return data;\n}","/home/nick/dev/dockerman/src/components/useToken.js",[],"/home/nick/dev/dockerman/src/components/InfoField.js",[],"/home/nick/dev/dockerman/src/components/Images.js",[],"/home/nick/dev/dockerman/src/components/api/image.js",[],"/home/nick/dev/dockerman/src/components/Image.js",[],{"ruleId":"118","severity":1,"message":"119","line":3,"column":35,"nodeType":"120","messageId":"121","endLine":3,"endColumn":40},{"ruleId":"122","replacedBy":"123"},{"ruleId":"124","replacedBy":"125"},{"ruleId":"126","severity":1,"message":"127","line":13,"column":20,"nodeType":"128","messageId":"129","endLine":13,"endColumn":22},{"ruleId":"126","severity":1,"message":"127","line":13,"column":36,"nodeType":"128","messageId":"129","endLine":13,"endColumn":38},{"ruleId":"130","severity":1,"message":"131","line":21,"column":8,"nodeType":"132","endLine":21,"endColumn":10,"suggestions":"133"},{"ruleId":"126","severity":1,"message":"134","line":34,"column":20,"nodeType":"128","messageId":"129","endLine":34,"endColumn":22},{"ruleId":"126","severity":1,"message":"134","line":37,"column":23,"nodeType":"128","messageId":"129","endLine":37,"endColumn":25},{"ruleId":"118","severity":1,"message":"135","line":38,"column":17,"nodeType":"120","messageId":"121","endLine":38,"endColumn":23},{"ruleId":"126","severity":1,"message":"134","line":48,"column":20,"nodeType":"128","messageId":"129","endLine":48,"endColumn":22},{"ruleId":"126","severity":1,"message":"134","line":51,"column":23,"nodeType":"128","messageId":"129","endLine":51,"endColumn":25},{"ruleId":"126","severity":1,"message":"134","line":62,"column":20,"nodeType":"128","messageId":"129","endLine":62,"endColumn":22},{"ruleId":"126","severity":1,"message":"127","line":65,"column":23,"nodeType":"128","messageId":"129","endLine":65,"endColumn":25},{"ruleId":"126","severity":1,"message":"134","line":76,"column":20,"nodeType":"128","messageId":"129","endLine":76,"endColumn":22},{"ruleId":"126","severity":1,"message":"127","line":79,"column":23,"nodeType":"128","messageId":"129","endLine":79,"endColumn":25},{"ruleId":"136","severity":1,"message":"137","line":93,"column":17,"nodeType":"138","messageId":"139","endLine":93,"endColumn":23},{"ruleId":"136","severity":1,"message":"137","line":101,"column":17,"nodeType":"138","messageId":"139","endLine":101,"endColumn":23},{"ruleId":"136","severity":1,"message":"137","line":109,"column":17,"nodeType":"138","messageId":"139","endLine":109,"endColumn":23},{"ruleId":"136","severity":1,"message":"137","line":116,"column":17,"nodeType":"138","messageId":"139","endLine":116,"endColumn":23},{"ruleId":"136","severity":1,"message":"137","line":124,"column":17,"nodeType":"138","messageId":"139","endLine":124,"endColumn":23},{"ruleId":"118","severity":1,"message":"140","line":1,"column":8,"nodeType":"120","messageId":"121","endLine":1,"endColumn":14},{"ruleId":"118","severity":1,"message":"141","line":9,"column":11,"nodeType":"120","messageId":"121","endLine":9,"endColumn":18},{"ruleId":"118","severity":1,"message":"142","line":1,"column":17,"nodeType":"120","messageId":"121","endLine":1,"endColumn":25},{"ruleId":"118","severity":1,"message":"143","line":10,"column":9,"nodeType":"120","messageId":"121","endLine":10,"endColumn":18},{"ruleId":"126","severity":1,"message":"134","line":15,"column":16,"nodeType":"128","messageId":"129","endLine":15,"endColumn":18},"no-unused-vars","'Route' is defined but never used.","Identifier","unusedVar","no-native-reassign",["144"],"no-negated-in-lhs",["145"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getContainerState'. Either include it or remove the dependency array.","ArrayExpression",["146"],"Expected '!==' and instead saw '!='.","'status' is assigned a value but never used.","no-unreachable","Unreachable code.","BreakStatement","unreachableCode","'Button' is defined but never used.","'restart' is assigned a value but never used.","'useState' is defined but never used.","'container' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"147","fix":"148"},"Update the dependencies array to be: [getContainerState]",{"range":"149","text":"150"},[617,619],"[getContainerState]"]